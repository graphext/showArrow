{"version":3,"sources":["node_modules/flatbuffers/js/flatbuffers.mjs","node_modules/text-encoding-utf-8/lib/encoding.lib.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/isarray/index.js","node_modules/buffer/index.js","util/utf8.ts","io/interfaces.ts","util/compat.ts","util/buffer.ts","io/adapters.ts","vector.ts","fb/Schema.ts","fb/Message.ts","enum.ts","util/bit.ts","visitor.ts","visitor/typecomparator.ts","type.ts","data.ts","util/pretty.ts","builder/valid.ts","builder/buffer.ts","builder.ts","builder/bool.ts","builder/null.ts","builder/date.ts","builder/decimal.ts","builder/dictionary.ts","builder/fixedsizebinary.ts","util/math.ts","builder/float.ts","util/bn.ts","builder/int.ts","builder/time.ts","builder/timestamp.ts","builder/interval.ts","builder/binary.ts","builder/utf8.ts","builder/run.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","util/args.ts","schema.ts","builder/list.ts","builder/fixedsizelist.ts","builder/map.ts","builder/struct.ts","builder/union.ts","visitor/set.ts","visitor/builderctor.ts","builder/index.ts","fb/File.ts","ipc/metadata/file.ts","io/stream.ts","io/file.ts","util/int.ts","visitor/vectorloader.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","util/recordbatch.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/fn.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","table.ts","recordbatch.ts","ipc/reader.ts","io/whatwg/iterable.ts","io/whatwg/builder.ts","io/whatwg/reader.ts","io/whatwg/writer.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","dist/index.js"],"names":["flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","create","ZERO","prototype","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","i","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","set","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","length","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","utf8","codePoint","a","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","adopt","done","then","apply","__generator","body","_","f","y","g","label","sent","trys","ops","verb","Symbol","iterator","n","v","op","TypeError","call","pop","renderHeader","ds","thead","columns","tr","document","createElement","appendChild","th","_i","columns_1","col","th_1","innerText","renderBody","tbody","td","toString","row","get","renderCell","getValue","data","JSON","stringify","renderTable","querySelector","innerHTML","columnNames","schema","fields","map","name","cleanTable","console","log","showArrow","url","_a","from","fetch","window","main","_this","button","input","downloadAndShow","onclick","onkeydown","ev","key"],"mappings":"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","file":"dist.e29b0700.js","sourceRoot":"..","sourcesContent":["/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Table } from \"apache-arrow\";\nfunction renderHeader(ds, thead, columns) {\n    var tr = document.createElement('tr');\n    thead.appendChild(tr);\n    // Row number\n    var th = document.createElement('th');\n    tr.appendChild(th);\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n        var col = columns_1[_i];\n        var th_1 = document.createElement('th');\n        th_1.innerText = col;\n        tr.appendChild(th_1);\n    }\n}\nfunction renderBody(ds, tbody, columns) {\n    for (var i = 0; i < ds.length; i++) {\n        var tr = document.createElement('tr');\n        tbody.appendChild(tr);\n        // Row number\n        var td = document.createElement('td');\n        td.innerText = i.toString();\n        tr.appendChild(td);\n        var row = ds.get(i);\n        for (var j = 0; j < columns.length; j++) {\n            renderCell(row.getValue(j), tr);\n        }\n    }\n}\nfunction renderCell(data, tr) {\n    var td = document.createElement('td');\n    td.innerText = JSON.stringify(data);\n    tr.appendChild(td);\n}\nfunction renderTable(ds) {\n    var thead = document.querySelector('thead');\n    var tbody = document.querySelector('tbody');\n    thead.innerHTML = '';\n    tbody.innerHTML = '';\n    var columnNames = ds.schema.fields.map(function (f) { return f.name; });\n    renderHeader(ds, thead, columnNames);\n    renderBody(ds, tbody, columnNames);\n}\nfunction cleanTable() {\n    console.log('cleanTable');\n    var thead = document.querySelector('thead');\n    var tbody = document.querySelector('tbody');\n    thead.innerHTML = '';\n    tbody.innerHTML = '';\n}\nfunction showArrow(url) {\n    return __awaiter(this, void 0, void 0, function () {\n        var table;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (url == null) {\n                        return [2 /*return*/];\n                    }\n                    return [4 /*yield*/, Table.from(fetch((url)))];\n                case 1:\n                    table = _a.sent();\n                    console.log(table);\n                    window['table'] = table;\n                    console.log(table.schema);\n                    renderTable(table);\n                    console.log('length: ', table.length);\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction main() {\n    var _this = this;\n    var button = document.querySelector('button');\n    var input = document.querySelector('input');\n    var downloadAndShow = function () { return __awaiter(_this, void 0, void 0, function () {\n        var url;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    button.innerText = \"loading ...\";\n                    cleanTable();\n                    url = input.value;\n                    return [4 /*yield*/, showArrow(url)];\n                case 1:\n                    _a.sent();\n                    button.innerText = \"SHOW\";\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    button.onclick = downloadAndShow;\n    input.onkeydown = function (ev) {\n        if (ev.key == 'Enter') {\n            downloadAndShow();\n        }\n    };\n}\nmain();\n"]}